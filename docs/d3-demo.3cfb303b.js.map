{"version":3,"sources":["d3-demo.js"],"names":["line_svg","colorSet","sunshineArray","margin","top","right","bottom","left","w","h","legendSpace","y","d3","scaleLinear","range","x","scaleTime","yAxis","axisLeft","xAxis","axisBottom","tickFormat","timeFormat","citySet","csv","sunshineData","then","data","forEach","d","push","includes","city","drawLineD3","scaleOrdinal","domain","schemeSet2","extent","timeParse","month","parseFloat","sunshine","select","append","attr","call","currentCity","filter","e","line","path","datum","style","i","length","text"],"mappings":"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","file":"d3-demo.3cfb303b.js","sourceRoot":"..\\src","sourcesContent":["import sunshineData from '../static/sunshine.csv'    // import dataset\r\n\"use strict\";     // the code should be executed in \"strict mode\".\r\n                  // With strict mode, you can not, for example, use undeclared variables\r\n\r\n\r\nvar line_svg;    // used for svg later\r\nvar colorSet;    // used for color scheme later\r\nvar sunshineArray = [];   // used to store data later\r\n\r\n// preparation for our svg\r\nvar margin = { top: 50, right: 35, bottom: 50, left: 50 },\r\nw = 650 - (margin.left + margin.right),\r\nh = 520 - (margin.top + margin.bottom);\r\nvar legendSpace = 130;\r\n\r\n// preparation for our x/y axis\r\nvar y = d3.scaleLinear()\r\n          .range([h, 0]);\r\nvar x = d3.scaleTime()\r\n          .range([ 0, w]);\r\nvar yAxis = d3.axisLeft(y);\r\nvar xAxis = d3.axisBottom(x).tickFormat(d3.timeFormat(\"%b\"));   // %b: abbreviated Month format (Mon, Jun..)\r\n\r\nvar citySet = [];\r\n\r\n// once finish processing data, make a graph!\r\nd3.csv(sunshineData).then(function(data) {\r\n  data.forEach(function(d){\r\n    sunshineArray.push(d);\r\n    if (!citySet.includes(d.city)) {\r\n      citySet.push(d.city);\r\n    }\r\n  })\r\n  drawLineD3();\r\n});\r\n\r\nfunction drawLineD3() {\r\n  colorSet = d3.scaleOrdinal().domain(citySet)\r\n                .range(d3.schemeSet2);\r\n  x.domain(d3.extent(sunshineArray, function(d) { return d3.timeParse(\"%b\")(d.month); }));\r\n  y.domain(d3.extent(sunshineArray, function(d) { return parseFloat(d.sunshine); }));\r\n\r\n  // create our svg\r\n  line_svg = d3.select('#d3-demo').append('svg')\r\n  .attr(\"id\", \"line-chart\")\r\n  .attr(\"width\", w + margin.left + margin.right + legendSpace)\r\n  .attr(\"height\", h + margin.top + margin.bottom)\r\n  .append('g')\r\n  .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n  // append x axis to svg\r\n  line_svg.append(\"g\")\r\n  .attr(\"transform\", \"translate(0,\" + h + \")\")\r\n  .attr(\"class\",\"myXaxis\")\r\n  .call(xAxis);\r\n\r\n  // append y axis to svg\r\n  line_svg.append(\"g\")\r\n  .attr(\"class\",\"myYaxis\")\r\n  .call(yAxis);\r\n\r\n// make a line for each city\r\n  citySet.forEach(function(d) {\r\n      var currentCity = sunshineArray.filter(function(e) {return e.city === d;});\r\n\r\n      var line = d3.line()\r\n      .x(function(d){return x(d3.timeParse(\"%b\")(d.month));})\r\n      .y(function(d){return y(parseFloat(d.sunshine));});\r\n\r\n      var path = line_svg.append(\"path\")\r\n        .datum(currentCity)\r\n        .attr(\"class\", \"lines\")\r\n        .attr('d', line)\r\n        .style(\"stroke-width\", 2.5)\r\n        .style(\"fill\", \"none\")\r\n        .attr(\"stroke\", colorSet(d))\r\n  });\r\n\r\n  // add legend\r\n  for (let i = 0; i < citySet.length; i++) {\r\n    line_svg.append(\"rect\").attr(\"class\",\"legends\").attr(\"x\",600).attr(\"y\",25+30*i).attr(\"width\", 10).attr(\"height\", 10).style(\"fill\", colorSet(citySet[i]));\r\n    line_svg.append(\"text\").attr(\"class\",\"legends\").attr(\"x\", 620).attr(\"y\", 30+30*i).text(citySet[i]).style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n  }\r\n}\r\n\r\n\r\n"]}