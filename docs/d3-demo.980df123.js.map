{"version":3,"sources":["d3-demo.js"],"names":["line_svg","colorSet","sunshineArray","margin","top","right","bottom","left","w","h","legendSpace","y","d3","scaleLinear","range","x","scaleTime","yAxis","axisLeft","xAxis","axisBottom","tickFormat","timeFormat","citySet","drawLineD3","scaleOrdinal","domain","schemeSet2","extent","d","timeParse","month","parseFloat","sunshine","select","append","attr","call","forEach","currentCity","filter","e","city","line","datum","style","i","length","text","csv","sunshineData","then","data","push","includes"],"mappings":";;;AAmFC,aAnFD,IAKIA,EACAC,EANJ,EAAA,EAAA,QAAA,2BAmFC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA5ED,IAAIC,EAAgB,GAGhBC,EAAS,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrDC,EAAI,KAAOL,EAAOI,KAAOJ,EAAOE,OAChCI,EAAI,KAAON,EAAOC,IAAMD,EAAOG,QAC3BI,EAAc,IAGdC,EAAIC,GAAGC,cACAC,MAAM,CAACL,EAAG,IACjBM,EAAIH,GAAGI,YACAF,MAAM,CAAE,EAAGN,IAClBS,EAAQL,GAAGM,SAASP,GACpBQ,EAAQP,GAAGQ,WAAWL,GAAGM,WAAWT,GAAGU,WAAW,OAElDC,EAAU,GAad,SAASC,IACPvB,EAAWW,GAAGa,eAAeC,OAAOH,GACrBT,MAAMF,GAAGe,YACxBZ,EAAEW,OAAOd,GAAGgB,OAAO1B,EAAe,SAAS2B,GAAYjB,OAAAA,GAAGkB,UAAU,KAAblB,CAAmBiB,EAAEE,UAC5EpB,EAAEe,OAAOd,GAAGgB,OAAO1B,EAAe,SAAS2B,GAAYG,OAAAA,WAAWH,EAAEI,cAGpEjC,EAAWY,GAAGsB,OAAO,YAAYC,OAAO,OACvCC,KAAK,KAAM,cACXA,KAAK,QAAS5B,EAAIL,EAAOI,KAAOJ,EAAOE,MAAQK,GAC/C0B,KAAK,SAAU3B,EAAIN,EAAOC,IAAMD,EAAOG,QACvC6B,OAAO,KACPC,KAAK,YAAa,aAAejC,EAAOI,KAAO,IAAMJ,EAAOC,IAAM,MAG1D+B,OAAO,KACfC,KAAK,YAAa,eAAiB3B,EAAI,KACvC2B,KAAK,QAAQ,WACbC,KAAKlB,GAGNnB,EAASmC,OAAO,KACfC,KAAK,QAAQ,WACbC,KAAKpB,GAGNM,EAAQe,QAAQ,SAAST,GACjBU,IAAAA,EAAcrC,EAAcsC,OAAO,SAASC,GAAWA,OAAAA,EAAEC,OAASb,IAElEc,EAAO/B,GAAG+B,OACb5B,EAAE,SAASc,GAAUd,OAAAA,EAAEH,GAAGkB,UAAU,KAAblB,CAAmBiB,EAAEE,UAC5CpB,EAAE,SAASkB,GAAUlB,OAAAA,EAAEqB,WAAWH,EAAEI,aAE1BjC,EAASmC,OAAO,QACxBS,MAAML,GACNH,KAAK,QAAS,SACdA,KAAK,IAAKO,GACVE,MAAM,eAAgB,KACtBA,MAAM,OAAQ,QACdT,KAAK,SAAUnC,EAAS4B,MAI1B,IAAA,IAAIiB,EAAI,EAAGA,EAAIvB,EAAQwB,OAAQD,IAClC9C,EAASmC,OAAO,QAAQC,KAAK,QAAQ,WAAWA,KAAK,IAAI,KAAKA,KAAK,IAAI,GAAG,GAAGU,GAAGV,KAAK,QAAS,IAAIA,KAAK,SAAU,IAAIS,MAAM,OAAQ5C,EAASsB,EAAQuB,KACpJ9C,EAASmC,OAAO,QAAQC,KAAK,QAAQ,WAAWA,KAAK,IAAK,KAAKA,KAAK,IAAK,GAAG,GAAGU,GAAGE,KAAKzB,EAAQuB,IAAID,MAAM,YAAa,QAAQT,KAAK,qBAAqB,UAvD5JxB,GAAGqC,IAAIC,EAAP,SAAqBC,KAAK,SAASC,GACjCA,EAAKd,QAAQ,SAAST,GACpB3B,EAAcmD,KAAKxB,GACdN,EAAQ+B,SAASzB,EAAEa,OACtBnB,EAAQ8B,KAAKxB,EAAEa,QAGnBlB","file":"d3-demo.980df123.js","sourceRoot":"..\\src","sourcesContent":["import sunshineData from '../static/sunshine.csv'    // import dataset\r\n\"use strict\";     // the code should be executed in \"strict mode\".\r\n                  // With strict mode, you can not, for example, use undeclared variables\r\n\r\n\r\nvar line_svg;    // used for svg later\r\nvar colorSet;    // used for color scheme later\r\nvar sunshineArray = [];   // used to store data later\r\n\r\n// preparation for our svg\r\nvar margin = { top: 50, right: 35, bottom: 50, left: 50 },\r\nw = 650 - (margin.left + margin.right),\r\nh = 520 - (margin.top + margin.bottom);\r\nvar legendSpace = 130;\r\n\r\n// preparation for our x/y axis\r\nvar y = d3.scaleLinear()\r\n          .range([h, 0]);\r\nvar x = d3.scaleTime()\r\n          .range([ 0, w]);\r\nvar yAxis = d3.axisLeft(y);\r\nvar xAxis = d3.axisBottom(x).tickFormat(d3.timeFormat(\"%b\"));   // %b: abbreviated Month format (Mon, Jun..)\r\n\r\nvar citySet = [];\r\n\r\n// once finish processing data, make a graph!\r\nd3.csv(sunshineData).then(function(data) {\r\n  data.forEach(function(d){\r\n    sunshineArray.push(d);\r\n    if (!citySet.includes(d.city)) {\r\n      citySet.push(d.city);\r\n    }\r\n  })\r\n  drawLineD3();\r\n});\r\n\r\nfunction drawLineD3() {\r\n  colorSet = d3.scaleOrdinal().domain(citySet)\r\n                .range(d3.schemeSet2);\r\n  x.domain(d3.extent(sunshineArray, function(d) { return d3.timeParse(\"%b\")(d.month); }));\r\n  y.domain(d3.extent(sunshineArray, function(d) { return parseFloat(d.sunshine); }));\r\n\r\n  // create our svg\r\n  line_svg = d3.select('#d3-demo').append('svg')\r\n  .attr(\"id\", \"line-chart\")\r\n  .attr(\"width\", w + margin.left + margin.right + legendSpace)\r\n  .attr(\"height\", h + margin.top + margin.bottom)\r\n  .append('g')\r\n  .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n  // append x axis to svg\r\n  line_svg.append(\"g\")\r\n  .attr(\"transform\", \"translate(0,\" + h + \")\")\r\n  .attr(\"class\",\"myXaxis\")\r\n  .call(xAxis);\r\n\r\n  // append y axis to svg\r\n  line_svg.append(\"g\")\r\n  .attr(\"class\",\"myYaxis\")\r\n  .call(yAxis);\r\n\r\n// make a line for each city\r\n  citySet.forEach(function(d) {\r\n      var currentCity = sunshineArray.filter(function(e) {return e.city === d;});\r\n\r\n      var line = d3.line()\r\n      .x(function(d){return x(d3.timeParse(\"%b\")(d.month));})\r\n      .y(function(d){return y(parseFloat(d.sunshine));});\r\n\r\n      var path = line_svg.append(\"path\")\r\n        .datum(currentCity)\r\n        .attr(\"class\", \"lines\")\r\n        .attr('d', line)\r\n        .style(\"stroke-width\", 2.5)\r\n        .style(\"fill\", \"none\")\r\n        .attr(\"stroke\", colorSet(d))\r\n  });\r\n\r\n  // add legend\r\n  for (let i = 0; i < citySet.length; i++) {\r\n    line_svg.append(\"rect\").attr(\"class\",\"legends\").attr(\"x\",600).attr(\"y\",25+30*i).attr(\"width\", 10).attr(\"height\", 10).style(\"fill\", colorSet(citySet[i]));\r\n    line_svg.append(\"text\").attr(\"class\",\"legends\").attr(\"x\", 620).attr(\"y\", 30+30*i).text(citySet[i]).style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n  }\r\n}\r\n\r\n\r\n"]}